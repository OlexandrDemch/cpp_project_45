#include <iostream>

template<typename T>
class Stack {
private:
    struct Node {
        T data;
        Node* next;
        Node(const T& value) : data(value), next(nullptr) {}
    };

    Node* topNode;
    size_t size;

public:
    Stack() : topNode(nullptr), size(0) {}

    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    void push(const T& value) {
        Node* newNode = new Node(value);
        newNode->next = topNode;
        topNode = newNode;
        size++;
    }

    void pop() {
        if (isEmpty()) {
            std::cerr << "Error: Stack is empty, cannot pop" << std::endl;
            return;
        }

        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
        size--;
    }

    T& top() const {
        if (isEmpty()) {
            throw std::runtime_error("Error: Stack is empty, cannot access top element");
        }
        return topNode->data;
    }

    bool isEmpty() const {
        return size == 0;
    }

    size_t getSize() const {
        return size;
    }
};

int main() {
    Stack<int> stack;

    stack.push(1);
    stack.push(2);
    stack.push(3);

    std::cout << "Top element: " << stack.top() << std::endl;

    stack.pop();
    std::cout << "Top element after pop: " << stack.top() << std::endl;

    std::cout << "Size of stack: " << stack.getSize() << std::endl;

    return 0;
}
