#include <iostream>

template<typename T>
class LinkedList {
private:
    struct Node {
        T data;
        Node* next;
        Node(const T& value) : data(value), next(nullptr) {}
    };

    Node* head;
    size_t size;

public:
    LinkedList() : head(nullptr), size(0) {}

    ~LinkedList() {
        clear();
    }

    void push_back(const T& value) {
        if (!head) {
            head = new Node(value);
        } else {
            Node* current = head;
            while (current->next) {
                current = current->next;
            }
            current->next = new Node(value);
        }
        size++;
    }

    void clear() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
        size = 0;
    }

    Node* clone() const {
        Node* newHead = nullptr;
        Node* tail = nullptr;
        Node* current = head;
        while (current) {
            Node* newNode = new Node(current->data);
            if (!newHead) {
                newHead = newNode;
                tail = newHead;
            } else {
                tail->next = newNode;
                tail = tail->next;
            }
            current = current->next;
        }
        return newHead;
    }

    LinkedList<T> operator+(const LinkedList<T>& other) const {
        LinkedList<T> result;
        Node* current = head;
        while (current) {
            result.push_back(current->data);
            current = current->next;
        }
        current = other.head;
        while (current) {
            result.push_back(current->data);
            current = current->next;
        }
        return result;
    }

    LinkedList<T> operator*(const LinkedList<T>& other) const {
        LinkedList<T> result;
        Node* current = head;
        while (current) {
            Node* currentOther = other.head;
            while (currentOther) {
                if (current->data == currentOther->data) {
                    result.push_back(current->data);
                    break;
                }
                currentOther = currentOther->next;
            }
            current = current->next;
        }
        return result;
    }

    size_t getSize() const {
        return size;
    }

    void print() const {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    LinkedList<int> list1;
    list1.push_back(1);
    list1.push_back(2);
    list1.push_back(3);

    LinkedList<int> list2;
    list2.push_back(3);
    list2.push_back(4);
    list2.push_back(5);

    std::cout << "List 1: ";
    list1.print();
    std::cout << "List 2: ";
    list2.print();

    LinkedList<int> newList = list1 + list2;
    std::cout << "Concatenated list: ";
    newList.print();

    newList = list1 * list2;
    std::cout << "Common elements list: ";
    newList.print();

    return 0;
}
